! SJR_Rest_Req.wresl

! Retrieve SJR Restoration Settlement flow requirements.
! This file is included in Cycle 1 and uses average monthly values for the 
! restoration flow requirements.  This sets up water supply, snowmelt release,
! and flood control operations at Friant and allows the solution for the overall
! volume movement of water in the month.  

define SJRR_rel {
        case April {
                condition   month==APR
                value       rest_req_np*taf_cfs*30./14.
        }
        case MayOtherwise {
                condition always
                value       SJRR_mon
        }
}
define SJRR_relDV {alias SJRR_rel kind 'flow-min-requirement' units 'cfs'}

define SJRR_rel_p {
    case April {
        condition   month==APR
        value       rest_req_p*taf_cfs*30./16.
    }
    case Otherwise {
        condition   always
        value       SJRR_mon
    }
}

define rel_def_np {value max(0., SJRR_rel_p - SJRR_rel)}
define rel_def_p {value max(0., SJRR_rel - SJRR_rel_p)}

define rel_add_np {value min(rel_def_np, Fr_snow_rel*taf_cfs*30./14.)}
define rel_add_p {value min(rel_def_p, Fr_snow_rel*taf_cfs*30./16.)}
define rel_add_mon {value max(0.,Fr_snow_rel*taf_cfs - rel_add_np*14./30. - rel_add_p*16./30.)}

!Set snowmelt release
goal set_C_MLRTNA { C_MLRTNA < rel_add_np + rel_add_mon}

! restrict the release from Friant to be the restoration release target
! this value includes Gravelly Ford diversions and losses.  Set the segment
! of flow below Gravelly Ford as the actual restoration flow - this will be
! passed on to the restoration channel in SJR_Restrict.wresl
goal boundC_MLRTNmain { C_MLRTNm < SJRR_rel  }
define SJRR_L_SJRcb {value max(0., min(SJRR_rel - C_MLRTN_min*taf_cfs, 0.05*(SJRR_rel - C_MLRTN_min*taf_cfs) + 95.))}
goal setC_GRAVF_mainSJRR {C_GRAVF_mainSJRR < max(0.,SJRR_rel - C_MLRTN_min*taf_cfs - SJRR_L_SJRcb)}
goal set_D_GRAVF { D_GRAVF < 0.4 * min(SJRR_rel, C_MLRTN_min * taf_cfs) }
goal set_L_GRAVF { L_GRAVF = min(SJRR_rel, C_MLRTN_min * taf_cfs) - D_GRAVF }

goal lim_I18_rest_bal {I18_rest_bal < max(0., SJRR_rel - SJRR_mon - max(0., (SJRR_mon - I_MLRTN - (sio_fwua(-1)-S_MLRTNlevel1-S17level1)*taf_cfs)*30./16. ))}


!******************************************************************************
! SJRR Recapture Logic

! Set to results of SJRBASE cycle
! If Friant was in flood control, recapture is set to zero

define SJRR_flow_at_Merced {value min(c_sjrrest[SJRBASE], C_SJRSACK[SJRBASE] - L_SJRSAND[SJRBASE])}
goal set_SRRP_lmt  { 
    lhs D620D + D639A + D639B + D630C
    case flood {
        condition C_MLRTNa[SJRBASE] + C_MLRTNF[SJRBASE] > 0.
        rhs 0.}
    case otherwise {
        condition always
        rhs SJRR_flow_at_Merced
        lhs<rhs penalty 0.}
}

define recap_D620D_max {select D620D from SRRP_Recapture_Pot where mon=month}
define recap_D639A_max {select D639A from SRRP_Recapture_Pot where mon=month}
define recap_D630C_max {select D630C from SRRP_Recapture_Pot where mon=month}
define recap_max {value recap_D620D_max + recap_D639A_max + recap_D630C_max}

goal set_SRRP_lmt1  { D620D + D639A + D630C < SJRR_flow_at_Merced}

goal set_D620D_lmt1 { D620D < recap_D620D_max} ! SRRP flow recapture - Patterson ID
goal set_D620D_lmt2 { D620D < SJRR_flow_at_Merced * recap_D620D_max/recap_max}

goal set_D639A_lmt1 { D639A < recap_D639A_max}   ! SRRP flow recapture - Banta Carbona ID
goal set_D639A_lmt2 { D639A < SJRR_flow_at_Merced * recap_D639A_max/recap_max}

goal set_D630C_lmt1 { D630C < recap_D630C_max}   ! SRRP flow recapture - West Stanislaus ID
goal set_D630C_lmt2 { D630C < SJRR_flow_at_Merced * recap_D630C_max/recap_max}

! Remaining SRRP flow - remove from SJR temporarily
goal D639B_lmt1 { D639B < SJRR_flow_at_Merced - D620D - D639A - D630C}  

goal D639B_lmt11 { D639B = 0.}  
/*************************************
CVPcut_south.wresl
 
Tom FitzHugh BOR 5/7/2010

This file calculates delivery cutbacks based on CVP SOD demands.  Final cutback percentages 
for SOD are the minimum of the percent deliveries computed here and the percent delivery 
computed for the entire system in CVPcut_system.wresl.

Tiers 5 and 6 are currently not implemented, but left commented code in here to do that 
if need be.

1/5/2011: modified code to incorporate user-defined SOD CVP demands into cutback procedure -TF
*************************************/

!***************** DEFINES ****************************************************
/** The two variables right below (perdel_sys_dr, perdel_sys) don't get used for anything, 
only perdel_s does.  Left in since they were in Calsim, but could probably delete **/
!define perdel_sys_dr { value min(1.0, deltar_cvp_sys/acvpdem_dr_sys) }
!define perdel_sys { value min(1.0, deltar_cvp_sys/(acvpdem_tot_sys * CVP_tot_ratio_sys)) }
define perdel_s   { value min(1.0, deltar_cvp_s/(acvpdem_total_s * CVP_tot_ratio_s)) }

!define perdel_sysdv {alias perdel_sys kind 'percent-delivery' units 'none'}
define perdel_sdv {alias perdel_s kind 'percent-delivery' units 'none'}

! deltar_cvp_s    Forecast CVP delivery - Input from CVP delivery logic
! With addition of user-defined demands, demands could be less than delivery target, so cutback has to have a min of 0
define cut_delivery_s {value max(0.0,(acvpdem_total_s * CVP_tot_ratio_s) - deltar_cvp_s)}      !Total required cut in deliveries
!define cut_delivery_s {value max((1.0-perdel_sys)*acvpdem_total_s,(1.0-perdel_s)*acvpdem_total_s)}

! Delivery Reduction Percent by Tier
define tier0cut_s {

       case Critical {
            condition wyt_SHASTA_CVP == 4
            value     0.25}
       case rest {
            condition always
            value     0.00}
       }
define tier0excut_s {

       case Critical {
            condition wyt_SHASTA_CVP == 4
            value     0.23}                   !Exchange goes to 77% not 75%
       case rest {
            condition always
            value     0.00}
       }
       
define tier0rfcut_s {
       case Critical   { condition wyt_SHASTA_CVP == 4  value  0.25} 
       case otherwise  { condition always               value  0.00}}
define tier1cut_s {value 0.25} !1st Tier Reduced 1st
define tier2cut_s {value 0.25} !2nd Tier Reduced Next
define tier3cut_s {value 0.25} !3rd Tier Reduced Next
define tier4cut_s {value 0.25} !4th Tier Reduced Next
!define tier5cut_s {value 0.50} !5th Tier Reduced Next
!define tier6cut_s {value 0.75} !6th Tier Reduced Next

!*********** Tier 0 ************
!*  takes EX, RF down to 75%   *         No intermediate steps here.  If the ShastaIndex is critical, then
!*  when ShastaIndex Critical  *         Exchange Contracts and Refuge Contracts are cut from 100% to 75%.
!*******************************
define cut0_s     { value tier0excut_s*acvpdem_pex_s + tier0rfcut_s*acvpdem_prf_s }
define percut0_ex_s {value tier0excut_s}
define percut0_rf_s { value tier0rfcut_s }
define cut_pex0_s { value tier0excut_s*acvpdem_pex_s }
define cut_prf0_s { value tier0rfcut_s*acvpdem_prf_s }


!*********** Tier 1 ************
!*    takes AG down to 75%     *
!*******************************
define cut1_s     { value max(0.0, cut_delivery_s - cut0_s) }
define percut1_s  { value min(tier1cut_s, cut1_s/(acvpdem_pag_s*CVP_pag_ratio_s)) }
define cut_pag1_s { value percut1_s*acvpdem_pag_s*CVP_pag_ratio_s }

!*********** Tier 2 ************
!*  takes AG to 50%; MI to 75% *
!*******************************
define cut2_s     { value max(0.0, cut1_s - cut_pag1_s) }
define percut2_s  { value min(tier2cut_s, (cut2_s/(acvpdem_pag_s*CVP_pag_ratio_s + acvpdem_pmi_s*CVP_pmi_ratio_s))) }
define cut_pag2_s { value percut2_s*acvpdem_pag_s*CVP_pag_ratio_s }
define cut_pmi2_s { value percut2_s*acvpdem_pmi_s*CVP_pmi_ratio_s }

!*********** Tier 3 ***********
!  takes AG to 25%            *
!******************************
define cut3_s     { value max(0.0, cut2_s - cut_pag2_s - cut_pmi2_s) }
define percut3_s  { value min(tier3cut_s, cut3_s/(acvpdem_pag_s*CVP_pag_ratio_s)) }
define cut_pag3_s { value percut3_s*acvpdem_pag_s*CVP_pag_ratio_s }

!*********** Tier 4 *********
!  takes AG to 0; MI to 50% *
!****************************
define cut4_s     { value max(0.0, cut3_s - cut_pag3_s) }
define percut4_s  { value min(tier4cut_s, (cut4_s/(acvpdem_pag_s*CVP_pag_ratio_s + acvpdem_pmi_s*CVP_pmi_ratio_s))) }
define cut_pag4_s { value percut4_s*acvpdem_pag_s*CVP_pag_ratio_s }
define cut_pmi4_s { value percut4_s*acvpdem_pmi_s*CVP_pmi_ratio_s }

!*********** Tier 5 *********
!  takes MI to 0%          *
!****************************
!define cut5_s     { value max(0.0, cut4_s - cut_pag4_s - cut_pmi4_s) }
!define percut5_s  { value min(tier5cut_s, (cut5_s/acvpdem_pmi_s)) }
!define cut_pmi5_s { value percut5_s*acvpdem_pmi_s }

!********* Tier 6 *******
! takes EX & RF to 0%   *
!************************
!********* Tier 6 *******
! takes EX & RF to 0%   *
!************************
define cut6_s   {value 0.} !max(0.0, cut4_s - cut_pmi4_s - cut_pag4_s) }
define percut6_ex {value cut6_s/acvpdem_pex_sys}


!**********  Totals  ********
define cut_pag_s { value cut_pag1_s + cut_pag2_s + cut_pag3_s + cut_pag4_s}
define cut_pmi_s { value cut_pmi2_s + cut_pmi4_s /*+ cut_pmi5_s */}
define cut_pex_s { value cut_pex0_s + cut6_s}  
define cut_prf_s { value cut_prf0_s /*+ cut_prf6_s*/ }


!********** Allocation *********
define alc_ag_s { alias 1 - percut1_s - percut2_s - percut3_s - percut4_s kind 'percent-allocation' units 'none'}
define alc_mi_s { alias 1 - percut2_s - percut4_s /*- percut5_s*/ kind 'percent-allocation' units 'none'}
define alc_ex_s { alias 1 - percut0_ex_s - percut6_ex kind 'percent-allocation' units 'none'} 
define alc_rf_s { alias 1 - percut0_rf_s /*- percut6_s8*/ kind 'percent-allocation' units 'none'}



!**************************************************************************
! dvars to track the allocation steps
define perdel_cvpag_s1_dv {std kind 'percent-delivery' units 'none'}
define perdel_cvpag_s_base_dv {std kind 'percent-delivery' units 'none'}

! initial allocation based on cut logic
define perdel_cvpag_s1 { value 1 - cut_pag_s/acvpdem_pag_s }      !Percent of full delivery for AG

! Logic added to consider Stage 1 transfer contribution to SOD Allocation 
define dltar_pag_s_Stg1 {value perdel_cvpag_sys*acvpdem_pag_s } ! Split CVP_Targ into ag and m&i by ratio of annual CVP SOD demands 
define dltar_pmi_s_Stg1 {value perdel_cvpmi_sys*acvpdem_pmi_s }
define pdl_pag_sys_Stg1 {value dltar_pag_s_Stg1/acvpdem_pag_s}
define pdl_pmi_sys_Stg1 {value dltar_pmi_s_Stg1/acvpdem_pmi_s}

! "base" allocations can limit SOD to NOD allocation
define perdel_cvpag_s_base {value min(perdel_cvpag_s1, pdl_pag_sys_Stg1)}      !Percent of full delivery for AG considering Stage 1 Transfers 
define perdel_cvpmi_s_base {      !Percent of full delivery for MI considering Stage 1 Transfers 
    case Cut1 {
        condition    perdel_cvpag_s_base > 0.75
        value        1.0}
    case Cut2 {
        condition    perdel_cvpag_s_base > 0.50
        value        0.75 + perdel_cvpag_s_base - 0.50}
    case Cut3 {
        condition    perdel_cvpag_s_base > 0.25
        value        0.75    }
    case otherwise {
        condition    always
        value        0.5 + perdel_cvpag_s_base}
}
define perdel_cvpex_s_base { value 1 - cut_pex_s/acvpdem_pex_s }      !Percent of full delivery for Exchange
define perdel_cvprf_s_base { value 1 - cut_prf_s/acvpdem_prf_s }      !Percent of full delivery for REF

! assess CVPSL conditions to determine if an increase in allocation is warranted
include 'cvp_allocmod.wresl' 

define perdel_cvpag_s {  !Percent of full delivery for AG considering Stage 1 Transfers 
    case firstmonth {
        condition month==OCT .and. wateryear==1922
        value perdel_cvpag_s_base + cvp_perdel_incAg  }  
    case March {
        condition month==MAR
        value perdel_cvpag_s_base + cvp_perdel_incAg  }  
    case otherwise {
        condition always
        value max(perdv_cvpag_s(-1), perdel_cvpag_s_base + cvp_perdel_incAg) }
}

define perdel_cvpmi_s { !Percent of full delivery for MI
    case Cut1 {
        condition    perdel_cvpag_s > 0.75
        value        1.0}
    case Cut2 {
        condition    perdel_cvpag_s > 0.50
        value        0.75 + perdel_cvpag_s - 0.50}
    case Cut3 {
        condition    perdel_cvpag_s > 0.25
        value        0.75    }
    case otherwise {
        condition    always
        value        0.5 + perdel_cvpag_s}
}
define perdel_cvpex_s {value perdel_cvpex_s_base  }      !Percent of full delivery for Exchange
define perdel_cvprf_s {value perdel_cvprf_s_base  }      !Percent of full delivery for REF

!**************************************************************************
! Given the allocations determined above, calculate current ANNUAL deliveries

define acvpdel_pag_sys { value perdel_cvpag_sys * acvpdem_pag_sys}
define acvpdel_pmi_sys { value perdel_cvpmi_sys * acvpdem_pmi_sys}
define acvpdel_psc_sys { value perdel_cvpsc_sys * acvpdem_psc_sys}
define acvpdel_prf_sys { value perdel_cvprf_sys * acvpdem_prf_sys}

define acvpdel_ag_s { value perdel_cvpag_s * acvpdem_pag_s}
define acvpdel_mi_s { value perdel_cvpmi_s * acvpdem_pmi_s}
define acvpdel_ex_s { value perdel_cvpex_s * acvpdem_pex_s}
define acvpdel_rf_s { value perdel_cvprf_s * acvpdem_prf_s}
define acvpdel_tot_s { value acvpdel_ag_s + acvpdel_mi_s + acvpdel_ex_s + acvpdel_rf_s + acvpdem_pls_s }

!**************************************************************************
! Final Percent Delivery for output
goal set_perdv_cvpag_sys { perdv_cvpag_sys =  perdel_cvpag_sys }
goal set_perdv_cvpmi_sys { perdv_cvpmi_sys =  perdel_cvpmi_sys }
goal set_perdv_cvpsc_sys { perdv_cvpsc_sys =  perdel_cvpsc_sys }
goal set_perdv_cvprf_sys { perdv_cvprf_sys =  perdel_cvprf_sys }

goal set_perdv_cvpag_s { perdv_cvpag_s =  perdel_cvpag_s }
goal set_perdv_cvpmi_s { perdv_cvpmi_s =  perdel_cvpmi_s }
goal set_perdv_cvpex_s { perdv_cvpex_s =  perdel_cvpex_s }
goal set_perdv_cvprf_s { perdv_cvprf_s =  perdel_cvprf_s }

goal set_perdel_cvpag_s1_dv {perdel_cvpag_s1_dv = perdel_cvpag_s1}
goal set_perdel_cvpag_s_base_dv {perdel_cvpag_s_base_dv = perdel_cvpag_s_base}

!**************************************************************************





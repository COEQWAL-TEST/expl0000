/*************************************
FMStandard.wresl
Water Forum Modified FMS Alternative
*************************************/

! *** Compute the American River Index (ARI)  ***
! The ARI is the forecasted water year unimpaired flow for the American River at Folsom, less spills.
!Determine the volume of spills 
Define Fol_spill_vol {
    case FebMay {
        condition month >= FEB .and. month <=MAY
        sum(i=prevOCT,-1,1)
        max(0, C_FOLSM(i) - 8000)*cfs_taf(i) }           !Add up spills since October.  Assume all releases from Folsom Reservoir over 8000 cfs are spills
    case JunSep {
        condition month >=JUN .and. month<=SEP
        sum(i=prevOCT, prevAPR) 
        max(0, C_FOLSM(i) - 8000)*cfs_taf(i) }           !Add up spills between October and May.  Assume all releases from Folsom Reservoir over 8000 cfs are spills
    case Oct  {
        condition month == OCT .and. wateryear>1922
        sum (i=PrevOCT,PrevApr)
        max(0, C_FOLSM(i) - 8000)*cfs_taf(i) }           !Add up spills between previous year's October and May.  Assume all releases from Folsom Reservoir over 8000 cfs are spills
    case NovJan {
        condition month >=NOV .and. month <= JAN .and. wateryear >1922
        sum(i= prevOct - 12, PrevApr,1 )            !Add up spills between October and May for the previous water year
        max(0, C_FOLSM(i) - 8000)*cfs_taf(i) }           !Add up spills since October.  Assume all releases from Folsom Reservoir over 8000 cfs are spills
    case other {
        condition   always
        value       0}
    }

!Define the forecasted unimpaired flow  
Define Amer_B120  {         
    case FebSept  {
        Condition   Month>=FEB .and. month<=SEP
        Select      HIST 
        from        AR_B120 
        where       year=wateryear }
    case OctJan {                                       
        condition   always                              !Need to use the previous water year forecast in October through January    
        select      HIST
        from        AR_B120
        where       year=wateryear-1 }
    }

Define ARI_Index {value max(Amer_B120 - Fol_spill_vol , 0) }    !The American River Index is the WY forecast less spills to date.

! Defines Sacramento River Index
define SRI {timeseries kind 'INDEX' units 'TAF'}
define SRI_{alias SRI kind 'INDEX' units 'TAF'}

define minflowFMPJan_tmp {  !Initial MRR in January
        case Jan{
                condition       month == JAN                        ! Look up Jan flows in table CO_Schedule using the SRI (Sac River Index)
                select          MRR_Flow
                from            MRR_Schedule
                given           ARI=SRI 
                use             linear
                where           month=month }
        case other{
                condition       always
                value           0.}}

define minflowFMP_tmp {
        case FebDec {
                condition       month >= FEB .or. month <=DEC                               ! Look up February-December flows in table MRR_Schedule using the index flow Amer_FNF
                select          MRR_Flow
                from            MRR_Schedule
                given           ARI=ARI_Index 
                use             linear
                where           month=month }  
        case other {
                condition           always
                value               0.}
}

!********** Redd Dewatering Protections ********
! Chinook Redd Protections
Define minflowJanFeb_min {
        case Jan {
                condition       month == JAN
                value           0.7*C_Nimbus_mif(-1)  }   !Limit minflow to 70% of December MRR
        case Feb {
                condition       month == FEB
                value           0.7*C_Nimbus_mif(-2)  }   !Limit minflow to 70% of December MRR
        case other {
                condition       always
                value           0. }}
            
! Steelhead Redd Protections
define C_Nimbus_MIF_RDPA_base {std kind 'FLOW' units 'CFS'}       
Define C_Nimbus_MIF_RDPA_base_Init {
    case Feb{
        condition month==FEB
        value C_Nimbus_mif(-1)}       !use January's MRR as the RDPA base flow
    case Mar {
        condition month==MAR
        value max(C_Nimbus_mif(-1), C_Nimbus_MIF_RDPA_Base(-1))}    !use the greater of the January or February's MRR as the RDPA base flow
    case AprMay {
        condition month >= Apr .and. month <= MAY
        value C_Nimbus_MIF_RDPA_Base(-1)}
    case other {
        condition always
        value 0. }
}
Goal Set_C_Nimbus_MIF_RDPA_Base {C_Nimbus_MIF_RDPA_base = C_Nimbus_MIF_RDPA_base_Init}

define minflowFebMay_min{           ! lookup the minimum allowable flow in the LAR for Steelhead given the greater of the January or February MRR.
        case FebMay{
                condition       month >=FEB .and. month <=MAY                   
                select          MinAllowMRR
                from            AmerSteelhead
                given           BaseMRR=C_Nimbus_MIF_RDPA_base_Init
                use             linear}
        case other {
                condition           always
                value               0.}
}
!******* End of Redd Dewatering Protections *******

!******* Pulse Flow Calculations *******
Define minflowFMPFebMay_tmp {
    case FebMay {
        condition       month>=FEB .and. month<=MAY
        value           max(minflowJanFeb_min, minflowFebMay_min, minflowFMP_tmp) }
    case other {
        condition       always
        value           0. }
}

Define minflowFMPMarFlag_init {                                     !Setting a flag for pulse flows
    case NoSet {
        condition   month <= FEB .or. month >= JUL
        Value       0. }
    case MarSet {           !The pulse occurs if the March MRR is between 1000 and 1500 cfs
        Condition   month == MAR .and. minflowFMPFebMay_tmp >= 1000. .and. minflowFMPFebMay_tmp <= 1500 
        Value       1. }
    case MarNoSet{
        condition   month == MAR
        value       0. }
    case AprMayNoSet{   
        Condition   month >= APR .and. month <=JUN .and. minflowFMPMarFlag(-1) == 1
        Value   1. }
    case other {
        condition   always
        Value       0 }
    }
    
Define minflowFMPMarFlag {std kind 'FLAG' units 'NONE'}
Goal Set_minflowFMPMarFlag {minflowFMPMarFlag = minflowFMPMarFlag_Init}

define MarPulseFlow {       !Computing the maximum flow for the pulse
    case Mar_Pulse{
        condition       month == MAR                    
        value           minflowFMPMarFlag_Init * min(4000., 3 * minflowFMPFebMay_tmp) }     !the pulse is a maximum of 4000 cfs or 3 x the MRR
    case other{
        condition       always
        value           0.}
    }
    
define MarPulseVol_Init {       !Computing the volume of the pulse and it's downramp
    case Mar {
        condition       month == MAR                    !The pulse has a two-day peak, followed by a 500 cfs/day reduction back to MRR
        value           max(0., minflowFMPMarFlag_Init * ((MarPulseFlow-minflowFMPFebMay_tmp)*2. + (max(minflowFMPFebMay_tmp,MarPulseFlow-500.)-minflowFMPFebMay_tmp) + (max(minflowFMPFebMay_tmp,MarPulseFlow-1000.)-minflowFMPFebMay_tmp) 
                        + (max(minflowFMPFebMay_tmp,MarPulseFlow-1500.)-minflowFMPFebMay_tmp) + (max(minflowFMPFebMay_tmp,MarPulseFlow-2000.)-minflowFMPFebMay_tmp)
                        + (max(minflowFMPFebMay_tmp,MarPulseFlow-2500.)-minflowFMPFebMay_tmp) + (max(minflowFMPFebMay_tmp,MarPulseFlow-3000.)-minflowFMPFebMay_tmp)
                        + (max(minflowFMPFebMay_tmp,MarPulseFlow-3500.)-minflowFMPFebMay_tmp) + (max(minflowFMPFebMay_tmp,MarPulseFlow-4000.)-minflowFMPFebMay_tmp)) * 60. * 60. * 24. / (43560. * 1000.))}
    case AprJun {
        condition       month >=APR .and. month <=JUN
        value           MarPulseVol(-1) }
    case other{
        condition       always
        value           0.}
    }
define MarPulseVol {std kind 'Pulse_Volume' units 'TAF'}
Goal Set_MarPulseVol {MarPulseVol = MarPulseVol_Init}

define minflowFMP_AprJun_Pulse_Red {        !Volume to reduce each month's MRR by to accomodate March pulse
    case OctJan {
        condition       month >= OCT .and. month <= MAR
        Value           0. }
    case AprJun_Pulse {
        condition       month >= APR .and. month <= JUN             ! if the pulse was already triggered in a previous month, trigger reduction in subsequent months
        value           minflowFMPMarFlag_Init * (MarPulseVol_Init * 1000 / 91) * 43560 / (60 * 60 * 24) }      !compute the daily flow change for Apr, May, and June.
    case other {
        condition   always
        value       0.}
    }

define minflowFMP_Mar_Pulse {
    case March_Pulse {
        condition       month == MAR .and. minflowFMPFebMay_tmp >= 1000. .and. minflowFMPFebMay_tmp <= 1500.
        value           MarPulseVol_Init * taf_cfs }
    case other  {
        condition       always
        value           0. }
    }
!***** End of Pulse Flow Calculations *****


! ***** Minimum release requirement from Nimbus *****
define minflowFMPAmer {
        case Oct {
                condition       month == OCT
                value           min (minflowFMP_tmp, 1500.)}                !Max MRR in Oct is 1500 cfs
        case Nov_Dec {
                condition       month >=NOV .and. month <=DEC  
                value           minflowFMP_tmp}
        case Jan    {           
                condition       month == JAN
                value           min(C_Nimbus_mif(-1), max (minflowJanFeb_min, minflowFMPJan_tmp, 500.))}      
        case Feb {          
                condition       month ==FEB
                value           max (minflowJanFeb_min, minflowFebMay_min, minflowFMPFebMay_tmp, 500.)}
        case Mar {
                condition       month == MAR
                value           max (minflowFMPFebMay_tmp, minflowFMPFebMay_tmp + minflowFMP_Mar_Pulse, 500.)}      !Pulse flow can make the MRR higher than 1,750 cfs, 
        case AprMay {           
                condition       month >=Apr .and. month <=MAY 
                value           max (minflowFebMay_min, minflowFMPFebMay_tmp - minflowFMP_AprJun_Pulse_Red, 500.)}              
        case Jun {
                condition       month == JUN                                ! Look up flows in table CO_Schedule using the index flow Amer_FNF
                value           minflowFMP_tmp - minflowFMP_AprJun_Pulse_Red}
        case Jul {
                condition       month == JUL 
                value           minflowFMP_tmp}             
        case other {
                condition       always
                value           C_Nimbus_mif(-1)}     
}
! ***** End of Minimum Flow Calculations *****

!**************************************************************************************************************
!****Water Forum code to limit excess flows when storage is forecast to be below a carryover storage target****
!**************************************************************************************************************

!**** Set the end-of-May Storage Target *****
define EOMay_Target_Init {
    case FebMay {
        condition   Month>=FEB .and. month<=MAY
        Select      Storage
        From        EOMay_Target    
        Given       ARI = ARI_Index
        use         linear  }
    case Other {
        condition   always
        value       0.}
    } 

Define EOMay_Target {value min(EOMay_Target_Init, S_FOLSMLevel5(MAY-MONTH))}
!*** End of End-of-May Storage Target Calculation ****

!***** Set the End-of-December Storage Target *****
! The current year's UIFR volume is defined in the Demands70.wresl file
! Defining the previous year's UIFR Volume
define UIFR_YR { 
    case after_October {
          condition month >= OCT .and. month < MAR 
          select UIFR 
          from UIFR 
          where year = Wateryear - 1.} 
    case rest {
          condition always
          select UIFR 
          from UIFR 
          where year = Wateryear}
}   
Define UIFR_1YRPrev {            
    case after_October {
        condition month >= OCT .and. month < FEB .and. wateryear >= 1923                !Use UIFR value for February to January
              select UIFR 
              from UIFR 
              where year = Wateryear - 2.} 
    case after_Feb {
        condition month >=FEB .and. wateryear >= 1922
              select UIFR 
              from UIFR 
              where year = Wateryear - 1.}
    case rest {
        condition always
              select UIFR 
              from UIFR 
              where year = Wateryear}
}   
! Defining the two years prior UIFR volume
Define UIFR_2YRPrev {            
    case after_October {
        condition month >= OCT .and. month < FEB .and. wateryear >= 1924                
              select UIFR 
              from UIFR 
              where year = Wateryear - 3.} 
    case after_Feb {
        condition month >=FEB .and. wateryear >= 1923
            select UIFR
            from UIFR
            where year = Wateryear - 2. }
    case rest {
        condition always
              select UIFR 
              from UIFR 
              where year = Wateryear  }
} 
Define UIFR_3YRPrev {            
    case after_October {
        condition month >= OCT .and. month < FEB .and. wateryear >= 1925                
              select UIFR 
              from UIFR 
              where year = Wateryear - 4.} 
    case after_Feb {
        condition month >=FEB .and. wateryear >= 1924
            select UIFR
            from UIFR
            where year = Wateryear - 3. }
    case rest {
        condition always
              select UIFR 
              from UIFR 
              where year = Wateryear  }
}

Define EODec_Target{
/*!Use consistent target for all years for ROC on LTO
    case confyr {
        condition    UIFR_Yr <= 400
        value        230.  }                                    ! if it is a conference year, UIFR<=400, set Target to 230 TAF
    case TwoYrConf  {
        condition (UIFR_YR + UIFR_1YRPrev) <=1200               ! If the two-year average UIFR is less than 600, set Target to 230
        value       230.  }     
    case ThreeYrConf  {
        condition (UIFR_YR + UIFR_1YRPrev + UIFR_2YRPrev) <=2700    !If the three-year average UIFR is less than 900, set the Target to 230
        value       230.  }
    case FourYrConf {
        condition (UIFR_YR + UIFR_1YRPrev + UIFR_2YRPrev + UIFR_3YRPrev) <=4400 !If the three-year average UIFR is less than 1100, set the Target to 230
        value       230. }
*/    case other {
        condition   always
        value       275.  }
!        value       300.  }
}

! *** Explicit MRR Calculation for storage forecasting purposes ***
define minflowFMPAmer_FebMar_init {
        select          MRR_Flow
        from            MRR_Schedule
        given           ARI=ARI_index 
        use             linear
        where           month=6}        !Use March as the lookup month
define minflowFMPAmer_FebMar {value min(1750.,minflowFMPAmer_FebMar_init)}

define minflowFMPAmer_AprJun_init {
        select          MRR_Flow
        from            MRR_Schedule
        given           ARI=ARI_index 
        use             linear
        where           month=9}        !Use June as the lookup month
define minflowFMPAmer_AprJun {value min(1500.,minflowFMPAmer_AprJun_init)}

define minflowFMPAmer_JulSep_init {
        select          MRR_Flow
        from            MRR_Schedule
        given           ARI=ARI_index 
        use             linear
        where           month=10}       !Use July as the lookup month
define minflowFMPAmer_JulSep {value min(1750.,minflowFMPAmer_JulSep_init)}

define minflowFMPAmer_Oct_init {                            ! Look up Oct flows in table CO_Schedule using the index flow Amer_FNF
                select          MRR_Flow
                from            MRR_Schedule
                given           ARI=ARI_index 
                use             linear
                where           month=1}  !Lookup OCT value
define minflowFMPAmer_Oct { value min(minflowFMPAmer_OCT_init, 1500.)}  ! max flow in Sep and Oct is 1500 cfs

define minflowFMPAmer_NovDec {
        select          MRR_Flow
        from            MRR_Schedule
        given           ARI=ARI_index 
        use             linear
        where           month=2 }       !Use November as the lookup month

!*** end of explicit calculation of MRR for storage forecasting ***

! *** Calculate the forecasted evap from Folsom during June-Dec ***
! Computing total evaporation volume between current month and the end of December
define evap_coef {  !use for S_folsm_carryover
        select      coef
        from        FolEvapCoef
        where       month=month}

define Evap_Folsom {
    case JunDec { 
        condition   month >= JUN .or. month <= DEC
        value       S_FOLSM(-1) * evap_coef }
    case other {
        condition   always
        value       0.0}
}

!Compute evaporation for each individual month
define evap_coef_monthly { !use for S_FOLSM_init
        select      coef_monthly
        from        FolEvapCoef
        where       month=month}

define Evap_Folsom_monthly {
    case JunDec {
        condition   month >= JUN .or. month <= DEC
        value       S_FOLSM(-1) * evap_coef_monthly }
    case other {
        condition   always
        value       0.0}
}
!*** End of Evaporation Forecast ***

! February through May is used for the End-of-May storage operation.  June through September is used for the End-of-December storage operation
! Calculate the available water using the forecasted Folsom inflow - diversions from Folsom Reservoir and Folsom South Canal - Folsom evaporation
! If using a flow requirement downstream of Fairbairn, include the Fairbairn diversions (D302) and LAR inflows (I302).

define S_FOLSM_DemandFrcst {                           
        case FebMay {                   !calculate Folsom diversions + evaporation for February through May.
            condition       range (month, FEB, MAY) 
            sum(i=1,MAY-month )
                  + min(dem_D8b_pmi_ann(i), dem1_D8b_pmi_a * perdel_cvpmi_sys) * perdem_70Fol(i)
                  + min(dem_D8e_pmi_ann(i), dem1_D8e_pmi_a * perdel_cvpmi_sys) * perdem_70SJWDS(i)
                  + min(dem_D8f_pmi_ann(i), dem1_D8f_pmi_a * perdel_cvpmi_sys) * perdem_70ElDor(i)
                  + min(dem_D8g_pmi_ann(i), dem1_D8g_pmi_a * perdel_cvpmi_sys) * perdem_70Rose(i)
                  + min(dem_D8h_pmi_ann(i), dem1_D8h_pmi_a * perdel_cvpmi_sys) * perdem_70pcwa(i)
                  + min(dem_D8i_pmi_ann(i), dem1_D8i_pmi_a * perdel_cvpmi_sys) * perdem_70ElDorCo(i)
                  + min(dem_D9ab_pmi_ann(i), dem1_D9ab_pmi_a * perdel_cvpmi_sys) * perdem_70CARec(i)
                  + min(dem_D9b_pmi_ann(i), dem1_D9b_pmi_a * perdel_cvpmi_sys) * perdem_70SMUD(i)
                  !+ min(dem_D300_pmi_ann(i), dem1_D300_pmi_a * perdel_cvpmi_sys) * perdem_70PCWA(i)
                  + dem_D8a_wr_annWAC * perdem_70NRWD(i)
                  + dem_D8b_wr_ann(i) * perdem_70Fol(i)
                  + dem_D8c_wr_ann(i) * perdem_70FolP(i)
                  + dem_D8d_wr_ann(i) * perdem_70SJWDP(i)
                  + dem_D8e_wr_ann(i) * perdem_70SJWDS(i)
                  + dem_D8f_wr_ann(i) * perdem_70ElDor(i)
                  + dem_D8g_wr_ann(i) * perdem_70Rose(i)
                  + dem_D8h_wr_ann(i) * perdem_70PCWA(i)
                  + dem_D9b_wr_ann(i) * perdem_70SMUD(i)
                  + dem_D9aa_wr_ann(i) * perdem_70SCWC(i)
                  + (dem_D300_wr_ann(i)-dem_D8a_wr_annWAC) * perdem_70PCWA(i)
                  + dem_D9a_pls(i) * cfs_taf(i)}  
        case JunSep {                                     !calculate Folsom diversions + evaporation for Jun-Dec.
            condition       range (month, JUN, SEP) .and. wateryear < 2003      !Between May and September
            sum(i=1,SEP-month + 3 )
                  + min(dem_D8b_pmi_ann(i), dem1_D8b_pmi_a * perdel_cvpmi_sys) * perdem_70Fol(i)
                  + min(dem_D8e_pmi_ann(i), dem1_D8e_pmi_a * perdel_cvpmi_sys) * perdem_70SJWDS(i)
                  + min(dem_D8f_pmi_ann(i), dem1_D8f_pmi_a * perdel_cvpmi_sys) * perdem_70ElDor(i)
                  + min(dem_D8g_pmi_ann(i), dem1_D8g_pmi_a * perdel_cvpmi_sys) * perdem_70Rose(i)
                  + min(dem_D8h_pmi_ann(i), dem1_D8h_pmi_a * perdel_cvpmi_sys) * perdem_70pcwa(i)
                  + min(dem_D8i_pmi_ann(i), dem1_D8i_pmi_a * perdel_cvpmi_sys) * perdem_70ElDorCo(i)
                  + min(dem_D9ab_pmi_ann(i), dem1_D9ab_pmi_a * perdel_cvpmi_sys) * perdem_70CARec(i)
                  + min(dem_D9b_pmi_ann(i), dem1_D9b_pmi_a * perdel_cvpmi_sys) * perdem_70SMUD(i)
                  !+ min(dem_D300_pmi_ann(i), dem1_D300_pmi_a * perdel_cvpmi_sys) * perdem_70PCWA(i)
                  + dem_D8a_wr_annWAC * perdem_70NRWD(i)
                  + dem_D8b_wr_ann(i) * perdem_70Fol(i)
                  + dem_D8c_wr_ann(i) * perdem_70FolP(i)
                  + dem_D8d_wr_ann(i) * perdem_70SJWDP(i)
                  + dem_D8e_wr_ann(i) * perdem_70SJWDS(i)
                  + dem_D8f_wr_ann(i) * perdem_70ElDor(i)
                  + dem_D8g_wr_ann(i) * perdem_70Rose(i)
                  + dem_D8h_wr_ann(i) * perdem_70PCWA(i)
                  + dem_D9b_wr_ann(i) * perdem_70SMUD(i)
                  + dem_D9aa_wr_ann(i) * perdem_70SCWC(i)
                  + (dem_D300_wr_ann(i)-dem_D8a_wr_annWAC) * perdem_70PCWA(i)
                  + dem_D9a_pls(i) * cfs_taf(i)}  
        case OctDec {
            condition       range (month, OCT, DEC)                 !For October through November
                    sum(i=1,Dec-month)                          
                   min(dem_D8b_pmi_ann(i), dem1_D8b_pmi_a * perdel_cvpmi_sys) * perdem_70Fol(i)
                  + min(dem_D8e_pmi_ann(i), dem1_D8e_pmi_a * perdel_cvpmi_sys) * perdem_70SJWDS(i)
                  + min(dem_D8f_pmi_ann(i), dem1_D8f_pmi_a * perdel_cvpmi_sys) * perdem_70ElDor(i)
                  + min(dem_D8g_pmi_ann(i), dem1_D8g_pmi_a * perdel_cvpmi_sys) * perdem_70Rose(i)
                  + min(dem_D8h_pmi_ann(i), dem1_D8h_pmi_a * perdel_cvpmi_sys) * perdem_70pcwa(i)
                  + min(dem_D8i_pmi_ann(i), dem1_D8i_pmi_a * perdel_cvpmi_sys) * perdem_70ElDorCo(i)
                  + min(dem_D9ab_pmi_ann(i), dem1_D9ab_pmi_a * perdel_cvpmi_sys) * perdem_70CARec(i)
                  + min(dem_D9b_pmi_ann(i), dem1_D9b_pmi_a * perdel_cvpmi_sys) * perdem_70SMUD(i)
                  !+ min(dem_D300_pmi_ann(i), dem1_D300_pmi_a * perdel_cvpmi_sys) * perdem_70PCWA(i)
                  + dem_D8a_wr_annWAC * perdem_70NRWD(i)
                  + dem_D8b_wr_ann(i) * perdem_70Fol(i)
                  + dem_D8c_wr_ann(i) * perdem_70FolP(i)
                  + dem_D8d_wr_ann(i) * perdem_70SJWDP(i)
                  + dem_D8e_wr_ann(i) * perdem_70SJWDS(i)
                  + dem_D8f_wr_ann(i) * perdem_70ElDor(i)
                  + dem_D8g_wr_ann(i) * perdem_70Rose(i)
                  + dem_D8h_wr_ann(i) * perdem_70PCWA(i)
                  + dem_D9b_wr_ann(i) * perdem_70SMUD(i)
                  + dem_D9aa_wr_ann(i) * perdem_70SCWC(i)
                  + (dem_D300_wr_ann(i)-dem_D8a_wr_annWAC) * perdem_70PCWA(i)
                  + dem_D9a_pls(i) * cfs_taf(i)}  
        case other{ 
                condition       always
                value           0. }
}

Define S_FOLSM_DepletionFrcst {
    case FebMay {
        Condition month>=FEB .and. month <=MAY
        value S_FOLSM_DemandFrcst + Evap_Folsom }                                    
    case JunDec {
        Condition month >=JUN .or. month <=DEC
        value S_FOLSM_DemandFrcst + Evap_Folsom  }   
    case Other {
        condition always
        value 0.}
}       

Define S_FOLSM_InflFrcst_FebSep {
    case FebMay {                                   ! Forecast the inflow for the current month through the end of May. (For February through May)  
        condition   month >=FEB .and. month <= MAY
        sum(i=1,MAY-month ) I_FOLSM(i)*cfs_taf(i) + I_NIMBUS(I)*cfs_taf(i)}
    case JunSep {                                   ! Forecast the inflow for the current month through the end of September. (For June through September)
        condition   month >=JUN .and. month <= SEP .and. wateryear < 2003           
        sum(i=1,SEP-month ) I_FOLSM(i)*cfs_taf(i) + I_NIMBUS(I)*cfs_taf(i)}
    case Other {
        condition   always
        value       0.0}
}

Define S_FOLSM_in_90oct {
    select  Inflow
    from    AR_inflow_90pct
    where   mon=1 } 
Define S_FOLSM_in_90nov {
    select  Inflow
    from    AR_inflow_90pct
    where   mon=2 } 
Define S_FOLSM_in_90dec {
    select  Inflow
    from    AR_inflow_90pct
    where   mon=3 }
    
Define S_FOLSM_InflFrcst_OctDec {
    case MaySep {
        condition month >= JUN .and. month <= SEP
        value   S_FOLSM_in_90oct + S_FOLSM_in_90nov + S_FOLSM_in_90dec }                             !Using 90% exceedance inflow forecast (1944)
    case Oct {
        condition   month == OCT
        value       S_FOLSM_in_90nov + S_FOLSM_in_90dec   }                               !Using 90% exceedance inflow forecast (1944)
    case Nov {
        condition   month == NOV
        value       S_FOLSM_in_90dec}                                          !Using 90% exceedance inflow forecast (1944)
    case other{
        condition   always
        value       0.0}  
}
define S_FOLSM_InflFrcst {
    case FebMay {
        condition   month >= FEB .and. month <= MAY
        value       S_FOLSM_InflFrcst_FebSep  }
    case JunSep  {
        condition   month >= JUN .and. month <= SEP
        value       S_FOLSM_InflFrcst_FebSep + S_FOLSM_InflFrcst_OctDec }
    case OctDec  {
        condition   month >=OCT .and. month <=NOV
        value       S_FOLSM_InflFrcst_OctDec }
    case other{
        condition   always
        value       0.0}
}

!  Using 90% exceedance of inflows (I_FOLSM, I_NIMBUS)
Define S_FOLSM_OctDecInf{    
    case Oct{
        condition   month == OCT
        value       S_FOLSM_in_90oct }
    case Nov{
        condition   month == NOV
        value       S_FOLSM_in_90nov }
    case Dec{
        condition   month==DEC
        value       S_FOLSM_in_90dec}
    
    ! Use this regardless of perfect foresight or forecast
    case other{
        condition   always
        value       0.0}
}
define S_FOLSM_OctDecInf_dv {alias S_FOLSM_OctDecInf kind 'debug' units 'taf'}

! Forecast minimum MRR volume from February through target storage month (May or December) for use in forecasting storage - Used to identify the target storage at the end of the current month
define FMPfrcst {
    case Feb{
        condition       month==FEB
        value           (minflowFMPAmer_FebMar *31. + minflowFMPAmer_AprJun *( 30. + 31.)) *1.9835/1000. }
    case Mar{
        condition       month==MAR
        value           minflowFMPAmer_AprJun *( 30. + 31.) *1.9835/1000. }
    case Apr{
        condition       month==APR
        value           minflowFMPAmer_AprJun *( 31.) *1.9835/1000. }  
    case Jun{               
        condition       month==JUN
        value           (minflowFMPAmer_JulSep *( 31. + 30. + 31.) + minflowFMPAmer_Oct * (31.) + minflowFMPAmer_NovDec*(30. + 31.))*1.9835/1000.}     
    case Jul{               
        condition       month==JUL
        value           (minflowFMPAmer_JulSep *(31. + 30.) + minflowFMPAmer_Oct *(31.) + minflowFMPAmer_NovDec*(30. + 31.))*1.9835/1000.}     
    case Aug{               
        condition       month==AUG
        value           (minflowFMPAmer_JulSep * (30.) + minflowFMPAmer_Oct * (31.) + minflowFMPAmer_NovDec *(30. + 31.))*1.9835/1000.}     
    case Sep{               
        condition       month==SEP
        value           (minflowFMPAmer_Oct * (31.) + minflowFMPAmer_NovDec*(30. + 31.))*1.9835/1000.}     
    case Oct{               
        condition       month==OCT
        value           minflowFMPAmer_NovDec* (30. + 31.) *1.9835/1000.}     
    case Nov{               
        condition       month==NOV
        value           minflowFMPAmer_NovDec* (31.) *1.9835/1000.}                 
    case other{
        condition       always
        value           0.}
        }

! S_folsm_Carryover is the minimum storage required at the end of a given month, to ensure end-of-DEC Folsom Storage Target is met, assuming releases are only for MRR, and diversions and evaporation occur as forecasted.
define S_FOLSM_carryover {
    case FebApr {
        condition       month >=FEB .and. month <=Apr
        value           max(90., min(S_FOLSMLevel5, EOMay_Target - S_FOLSM_InflFrcst + S_FOLSM_DepletionFrcst + FMPfrcst))}
    case May {
        condition       month == MAY
        value           EOMay_Target  }
    case JunNov {       
        condition       month >= JUN .or. month <= NOV
        value           max(90., min(S_FOLSMLevel5, EODec_Target - S_FOLSM_InflFrcst + S_FOLSM_DepletionFrcst + FMPfrcst)) }   !a maximum of either 90 TAF (bottom out the reservoir) or desired storage (End of Dec Storage target) - available water in current month + min flow requirement.
    case Dec {
        condition       month == Dec
        value           EODec_Target }
    case other{
        condition       always
        value           S_FOLSMLevel5}
}
define S_FOLSM_carryover_DV {alias S_FOLSM_carryover kind 'Storage' units 'taf'}

! define the initial estimate of end of month Folsom Reservoir storage for the current month  
! Previous month's storage + inflows - diversions - evaporation - MIF
define S_FOLSM_init {
    case FebSep {
        condition       month>=FEB .and. month<=SEP
        value       min (S_FOLSMLevel5, S_FOLSM(-1) + I_FOLSM*cfs_taf + I_NIMBUS*cfs_taf
              - min(dem_D8b_pmi_ann , dem1_D8b_pmi_a * perdel_cvpmi_sys) * perdem_70Fol 
              - min(dem_D8e_pmi_ann , dem1_D8e_pmi_a * perdel_cvpmi_sys) * perdem_70SJWDS 
              - min(dem_D8f_pmi_ann , dem1_D8f_pmi_a * perdel_cvpmi_sys) * perdem_70ElDor 
              - min(dem_D8g_pmi_ann , dem1_D8g_pmi_a * perdel_cvpmi_sys) * perdem_70Rose 
              - min(dem_D8h_pmi_ann , dem1_D8h_pmi_a * perdel_cvpmi_sys) * perdem_70pcwa 
              - min(dem_D8i_pmi_ann , dem1_D8i_pmi_a * perdel_cvpmi_sys) * perdem_70ElDorCo 
              - min(dem_D9ab_pmi_ann , dem1_D9ab_pmi_a * perdel_cvpmi_sys) * perdem_70CARec 
              - min(dem_D9b_pmi_ann , dem1_D9b_pmi_a * perdel_cvpmi_sys) * perdem_70SMUD 
              !- min(dem_D300_pmi_ann , dem1_D300_pmi_a * perdel_cvpmi_sys) * perdem_70PCWA 
              - dem_D8a_wr_annWAC  * perdem_70NRWD 
              - dem_D8b_wr_ann  * perdem_70Fol 
              - dem_D8c_wr_ann  * perdem_70FolP 
              - dem_D8d_wr_ann  * perdem_70SJWDP 
              - dem_D8e_wr_ann  * perdem_70SJWDS 
              - dem_D8f_wr_ann  * perdem_70ElDor 
              - dem_D8g_wr_ann  * perdem_70Rose 
              - dem_D8h_wr_ann  * perdem_70PCWA
              - dem_D9b_wr_ann  * perdem_70SMUD 
              - dem_D9aa_wr_ann  * perdem_70SCWC 
              - (dem_D300_wr_ann-dem_D8a_wr_annWAC)  * perdem_70PCWA 
              - dem_D9a_pls  * cfs_taf 
              - Evap_Folsom_monthly - minflowFMPAmer*cfs_taf )} 
    case OctDec {
        condition       month>=OCT .and. month<=DEC
        value   min (S_FOLSMLevel5, S_FOLSM(-1) + S_FOLSM_OctDecInf 
              - min(dem_D8b_pmi_ann , dem1_D8b_pmi_a * perdel_cvpmi_sys) * perdem_70Fol 
              - min(dem_D8e_pmi_ann , dem1_D8e_pmi_a * perdel_cvpmi_sys) * perdem_70SJWDS 
              - min(dem_D8f_pmi_ann , dem1_D8f_pmi_a * perdel_cvpmi_sys) * perdem_70ElDor 
              - min(dem_D8g_pmi_ann , dem1_D8g_pmi_a * perdel_cvpmi_sys) * perdem_70Rose 
              - min(dem_D8h_pmi_ann , dem1_D8h_pmi_a * perdel_cvpmi_sys) * perdem_70pcwa 
              - min(dem_D8i_pmi_ann , dem1_D8i_pmi_a * perdel_cvpmi_sys) * perdem_70ElDorCo 
              - min(dem_D9ab_pmi_ann , dem1_D9ab_pmi_a * perdel_cvpmi_sys) * perdem_70CARec 
              - min(dem_D9b_pmi_ann , dem1_D9b_pmi_a * perdel_cvpmi_sys) * perdem_70SMUD 
              !- min(dem_D300_pmi_ann , dem1_D300_pmi_a * perdel_cvpmi_sys) * perdem_70PCWA 
              - dem_D8a_wr_annWAC  * perdem_70NRWD 
              - dem_D8b_wr_ann  * perdem_70Fol 
              - dem_D8c_wr_ann  * perdem_70FolP 
              - dem_D8d_wr_ann  * perdem_70SJWDP 
              - dem_D8e_wr_ann  * perdem_70SJWDS 
              - dem_D8f_wr_ann  * perdem_70ElDor 
              - dem_D8g_wr_ann  * perdem_70Rose
              - dem_D8h_wr_ann  * perdem_70PCWA
              - dem_D9b_wr_ann  * perdem_70SMUD 
              - dem_D9aa_wr_ann  * perdem_70SCWC 
              - (dem_D300_wr_ann-dem_D8a_wr_annWAC)  * perdem_70PCWA 
              - dem_D9a_pls  * cfs_taf 
              - Evap_Folsom_monthly - minflowFMPAmer*cfs_taf )}       
    case other {
        condition       always
        value           0.0   }
        }
define S_FOLSM_init_DV {alias S_FOLSM_init kind 'Storage' units 'taf'}

! define max water release from Folsom without jeopardizing the carryover storage target
define C_NIMBUS_max { 
    case FebDec {
        condition       month>=FEB .or. month<=DEC
        value           max(minflowFMPAmer, (S_FOLSM_init - S_FOLSM_carryover) * taf_cfs + minflowFMPAmer) }   ! initial estimate of Folsom Storage - carryover water + min flow requirement. 
    case other{
        condition       always
        value           99999}
    }
define C_NIMBUS_max_DV   {alias C_NIMBUS_max kind 'flow' units 'cfs'}

goal S_NIMBUS_high {  
    LHS C_NIMBUS
    case FebMay {
        condition   month>=FEB .and. month<=MAY                 
        RHS 		C_NIMBUS_max
        LHS < RHS   penalty 0
        LHS > RHS   penalty 1300}       !Default penalty was 4000
    case other {
        condition   always      
        RHS         C_NIMBUS_max
        LHS < RHS   penalty 0
        LHS > RHS   penalty 1300}       !Default penalty was 4000
}

define C_NIMBUS_fmp {alias minflowFMPAmer kind 'FLOW' units 'CFS'}     !save the final minflow to DSS

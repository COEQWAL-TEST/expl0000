/*************************************
ncp_relax.wresl

** Modified 2023-10-27 JMG-UCSC **
- adds functionality to set minimum flows as fraction of unimpaired
  flow at Bend Bridge
 
Tom FitzHugh BOR 7/7/2010

Sets Navigation Control Point minimum flow with relaxation.  Minimum flow is
met at Wilkins Slough.  NCP minimum flow is 5000, unless percent delivery
for Ag is 65% or less, in which case it can be 3250-4500 depending on percent 
delivery.  Minimum flow can change during Jan-May, and then May value is used 
during June-Dec.
*************************************/
!  moved options for sac unimpaired flow scenarios to main.wresl
!define wilkins_mif_option {value 0.} ! switch for MIF scenario: 0: just ncp, 1: unimpaired flow; 2: both

! get the unimpaired flow at bend bridge to use as the minflow requirement
define UNIMP_SRBB {timeseries kind 'FLOW-UNIMPAIRED' units 'TAF'}

define UNIMP_SRBB_CFS {value UNIMP_SRBB*taf_cfs} ! convert to CFS from tAF

!define ncp_unimp_fraction {value 0.4} ! fraction of unimpaired flow to assign at Wilkins Slough

define ShastaNCPlow {select low from ShastaNCPlevel where month=month}
define ShastaNCPmed {select med from ShastaNCPlevel where month=month}

define ncp_with_relax {!select flow from ncp_with_relax given Ag_alloc = perdel_cvpag_sys * 100 use maximum 
   case low { condition S_Shsta(-1)<ShastaNCPlow select low from ncp_with_relax given Ag_alloc = perdel_cvpag_sys * 100 use maximum }
   case med { condition S_Shsta(-1)<ShastaNCPmed select med from ncp_with_relax given Ag_alloc = perdel_cvpag_sys * 100 use maximum }
   case high { condition always   select high from ncp_with_relax given Ag_alloc = perdel_cvpag_sys * 100 use maximum }}

/*define ncp_with_relax {
    select flow
    from ncp_with_relax
    given Ag_alloc = perdel_cvpag_sys * 100
    use maximum
       }*/

! minflowNCP_C_Wilkns: this variable will reflect the original 
!'navigation control point' (ncp) min flow requirement, and 
! its attendant relaxations
define minflowNCP_C_Wilkns {std kind 'flow-min-required' units 'cfs'} 


define ncp_relax_final {value     ncp_with_relax}
/*
     case yr1922 {
          condition month <= MAR .and. wateryear == 1922
          value     ncp_with_relax
          }
     case JanthruMay {
          condition month >= JAN .and. month <= MAY
          value     ncp_with_relax
          }
     case Rest {
          condition always
          value     min(ncp_with_relax, minflow_C_Wilkns(-1))
          }
     }*/

goal set_minflow_C_Wilkns {minflowNCP_C_Wilkns = ncp_relax_final}

define minflowUnimp_C_Wilkns {std kind 'flow-min-unimp' units 'cfs'}

goal set_minflowUnimp_C_Wilkns {minflowUnimp_C_Wilkns = ncp_unimp_fraction*UNIMP_SRBB_CFS}

goal set_totminncp {
	lhs C_WILKNS_MIF + C_WILKNS_MIF_DAILY
	case just_ncp {
		condition wilkins_mif_option < 0.5
		rhs minflowNCP_C_Wilkns }
	case just_unimp {
		condition wilkins_mif_option < 1.5
		rhs minflowUnimp_C_Wilkns }
	case unimp_and_ncp {
		condition wilkins_mif_option < 2.5
		rhs max(ncp_unimp_fraction*UNIMP_SRBB_CFS, ncp_relax_final) }
	case otherwise {
		condition always
		rhs minflow_C_WilknsNCP	}
}

!goal set_NCP {C_Wilkns_MIF < minflow_C_Wilkns}

goal setncptoMin { !Keeps excess releases from Shasta during dry periods
    lhs C_Wilkns_EXC
    case lowshasta {
        condition S_Shsta(-1) + S_ShstaE(-1) < 1900.
        rhs 0.
! this weight is way too high - it will override COA
!        lhs>rhs penalty 3000 }
! this weight causes reservoir balancing to shift to Folsom if possible
        lhs>rhs penalty 10 }
!        lhs<rhs penalty 0 }
}


